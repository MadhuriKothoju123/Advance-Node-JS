services:
  postgres:
    image: postgres:16
    container_name: postgres_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: *****************
      POSTGRES_DB: *************
    ports:
      - "5432:5432"
    networks:
      - backend
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    container_name: redis_cache
    ports:
      - "6379:6379"   # exposed so you can test locally with redis-cli
    networks:
      - backend
    restart: always
    volumes:
      - redis_data:/data   # persistence if Redis restarts

  email-service:
    build:
      context: ./email-service
    container_name: email-service
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "6000:6000" # WebSocket endpoint exposed internally
    depends_on:
      - redis
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6000/health"]
      interval: 5s
      timeout: 3s
      retries: 5

  auth-service:
    build:
      context: ./auth-service
    container_name: auth-service
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: ****************
      DB_NAME: **********************
      REDIS_HOST: redis
      REDIS_PORT: 6379
      EMAIL_SERVICE_WS: "ws://email-service:6000"
    depends_on:
      - postgres
      - redis
      - email-service
    volumes:
      - ./nginx/ssl/dev:/app/certs:ro
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 5s
      timeout: 3s
      retries: 5

  employee-service:
    build:
      context: ./employee-service
    container_name: employee-service
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD:**************
      DB_NAME:*****************
      REDIS_HOST: redis
      REDIS_PORT: 6379
      EMAIL_SERVICE_WS: "ws://email-service:6000"
    depends_on:
      - postgres
      - redis
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 5s
      timeout: 3s
      retries: 5

  project-service:
    build:
      context: ./project-service
    container_name: project-service
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: **************
      DB_NAME: ***************
      REDIS_HOST: redis
      REDIS_PORT: 6379
      EMAIL_SERVICE_WS: "ws://email-service:6000"
    depends_on:
      - postgres
      - redis
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/health"]
      interval: 5s
      timeout: 3s
      retries: 5

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      auth-service:
        condition: service_healthy
      employee-service:
        condition: service_healthy
      project-service:
        condition: service_healthy
    networks:
      - backend

networks:
  backend:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
